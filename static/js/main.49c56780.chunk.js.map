{"version":3,"sources":["Snake.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Snake","state","height","width","grid","score","snake","x","y","food","gameOver","positionMoving","previousPosition","isSnakeInThisPosition","pos","find","part","componentDidMount","tick","setTimeout","Math","sqrt","snakeHead","nextPosition","unshift","console","log","length","pop","setState","step","getRandomFoodLocation","newFood","floor","random","newGame","move","movement","this","flag","i","push","drawGrid","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49c56780.chunk.js","sourcesContent":["import { throws } from 'assert';\r\nimport React from 'react';\r\nimport './Snake.css';\r\nimport { isThisTypeNode } from 'typescript';\r\n\r\nclass Snake extends React.Component <any, any>{\r\n    // var arr: number[][] = []\r\n    // var score: number = 0\r\n    state = {\r\n        height : 30,\r\n        width : 30,\r\n        grid: [],\r\n        score: 0,\r\n        snake: [{x: 1, y: 1}],\r\n        food: {x : 10, y: 10},\r\n        gameOver: false,\r\n        positionMoving: \"\",\r\n        previousPosition: \"\"\r\n    }\r\n\r\n    isSnakeInThisPosition = (pos: any) =>\r\n        this.state.snake.find((part) => part.x === pos.x && part.y === pos.y);\r\n\r\n    componentDidMount = () => this.tick()\r\n\r\n    tick = () => {\r\n        setTimeout(this.tick, 1000 / Math.sqrt(this.state.score + 1));\r\n        if(this.state.gameOver) return\r\n        var snake = this.state.snake\r\n        var snakeHead = this.state.snake[0]\r\n        var nextPosition = {x: snakeHead.x, y: snakeHead.y}\r\n        if(this.state.positionMoving === \"left\") {\r\n            nextPosition.x = snakeHead.x - 1 < 0 ? this.state.width - 1: snakeHead.x - 1\r\n        } else if(this.state.positionMoving === \"right\") {\r\n            nextPosition.x = snakeHead.x + 1 >= this.state.width ? 0 : snakeHead.x +1\r\n        } else if(this.state.positionMoving === \"up\") {\r\n            nextPosition.y = snakeHead.y - 1  < 0 ? this.state.height - 1: snakeHead.y - 1\r\n        } else {\r\n            nextPosition.y = snakeHead.y + 1 >= this.state.height ? 0 : snakeHead.y +1\r\n        }\r\n\r\n        //check to see if game ends\r\n        if(nextPosition.x === -1 || nextPosition.x === this.state.width + 1 ||\r\n            nextPosition.y === -1 || nextPosition.y === this.state.height + 1 ||\r\n            this.isSnakeInThisPosition(nextPosition)) {\r\n                this.gameOver()\r\n        } else {\r\n            snake.unshift(nextPosition)\r\n            console.log(snake)\r\n            if(this.state.snake.length > this.state.score + 1) {\r\n                snake.pop()\r\n            }\r\n            console.log(snake)\r\n            this.setState({snake: snake})\r\n            this.step()\r\n        }\r\n    }\r\n\r\n    step = () => {\r\n        if (this.state.food.x === this.state.snake[0].x &&\r\n            this.state.food.y === this.state.snake[0].y) {\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            })\r\n            this.getRandomFoodLocation()\r\n        }\r\n        // this.setState({food: {x : 10, y: 10}})\r\n\r\n    }\r\n\r\n    drawGrid(){\r\n        var grid = []\r\n        console.log(this.state.food.x +\", \" + this.state.food.y)\r\n        for(var y = 0; y < this.state.height; y++) {\r\n            for(var x = 0; x < this.state.width; x++) {\r\n                if(y === this.state.food.y && x === this.state.food.x) {\r\n                    grid.push(\"ü•©\")\r\n                    continue\r\n                }\r\n                var flag = true\r\n                for(var i = 0; i < this.state.snake.length; i++) {\r\n                    if (y === this.state.snake[i].y && x === this.state.snake[i].x) {\r\n                        grid.push(\"‚¨õÔ∏è\")\r\n                        flag = false\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    grid.push(\"‚¨úÔ∏è\")\r\n                }\r\n            }\r\n            grid.push(<br/>)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    getRandomFoodLocation = () => {\r\n        var newFood = {x: 0, y: 0}\r\n        do {\r\n            newFood.y = Math.floor(Math.random() * this.state.height)\r\n            newFood.x = Math.floor(Math.random() * this.state.width)\r\n        } while (this.isSnakeInThisPosition(newFood))\r\n        console.log(newFood)\r\n        this.setState({food: newFood})\r\n    }\r\n\r\n    gameOver = () => {\r\n        this.setState({gameOver : true})\r\n    }\r\n\r\n    newGame = () => {\r\n        this.setState({\r\n            gameOver : false,\r\n            snake: [{x: 1, y: 1}],\r\n            score: 0,\r\n            positionMoving: 'down'\r\n        })\r\n        this.getRandomFoodLocation()\r\n    }\r\n\r\n    move = (movement: string) => {\r\n        // var newMovement = this.state.positionMoving\r\n        // if((this.state.previousPosition === \"left\" && movement !== \"right\") ||\r\n        //    (this.state.previousPosition === \"right\" && movement !== \"left\") ||\r\n        //    (this.state.previousPosition === \"up\" && movement !== \"down\") ||\r\n        //    (this.state.previousPosition === \"down\" && movement !== \"up\")) {\r\n        //        newMovement = movement\r\n        //     }\r\n        this.setState({\r\n            positionMoving: movement\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Snake</h1>\r\n                <br/>\r\n                <h1>{this.state.score}</h1>\r\n                {this.drawGrid()}\r\n                <br />\r\n                <button onClick={this.newGame}>New Game</button>\r\n                <button onClick={() => this.move(\"left\")}>‚óÄÔ∏è</button>\r\n                <button onClick={() => this.move(\"up\")}>üîº</button>\r\n                <button onClick={() => this.move(\"down\")}>üîΩ</button>\r\n                <button onClick={() => this.move(\"right\")}>‚ñ∂Ô∏è</button>\r\n                <button onClick={this.gameOver}>End Game</button>\r\n                <br />\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Snake from './Snake';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snake/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}