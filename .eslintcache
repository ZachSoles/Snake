[{"C:\\Users\\zacso\\documents\\snake\\src\\index.tsx":"1","C:\\Users\\zacso\\documents\\snake\\src\\reportWebVitals.ts":"2","C:\\Users\\zacso\\documents\\snake\\src\\App.tsx":"3","C:\\Users\\zacso\\documents\\snake\\src\\Snake.tsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":216,"mtime":1612079212190,"results":"8","hashOfConfig":"6"},{"size":5311,"mtime":1612139522981,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"6mlzv8",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\zacso\\documents\\snake\\src\\index.tsx",[],["21","22"],"C:\\Users\\zacso\\documents\\snake\\src\\reportWebVitals.ts",[],"C:\\Users\\zacso\\documents\\snake\\src\\App.tsx",["23"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Snake from './Snake';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snake/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\zacso\\documents\\snake\\src\\Snake.tsx",["24","25"],"import { throws } from 'assert';\r\nimport React from 'react';\r\nimport './Snake.css';\r\nimport { isThisTypeNode } from 'typescript';\r\n\r\nclass Snake extends React.Component <any, any>{\r\n    // var arr: number[][] = []\r\n    // var score: number = 0\r\n    state = {\r\n        height : 30,\r\n        width : 30,\r\n        grid: [],\r\n        score: 0,\r\n        snake: [{x: 1, y: 1}],\r\n        food: {x : 10, y: 10},\r\n        gameOver: false,\r\n        positionMoving: \"\",\r\n        previousPosition: \"\"\r\n    }\r\n\r\n    isSnakeInThisPosition = (pos: any) =>\r\n        this.state.snake.find((part) => part.x === pos.x && part.y === pos.y);\r\n\r\n    componentDidMount = () => this.tick()\r\n\r\n    tick = () => {\r\n        setTimeout(this.tick, 1000 / Math.sqrt(this.state.score + 1));\r\n        if(this.state.gameOver) return\r\n        var snake = this.state.snake\r\n        var snakeHead = this.state.snake[0]\r\n        var nextPosition = {x: snakeHead.x, y: snakeHead.y}\r\n        if(this.state.positionMoving === \"left\") {\r\n            nextPosition.x = snakeHead.x - 1 < 0 ? this.state.width - 1: snakeHead.x - 1\r\n        } else if(this.state.positionMoving === \"right\") {\r\n            nextPosition.x = snakeHead.x + 1 >= this.state.width ? 0 : snakeHead.x +1\r\n        } else if(this.state.positionMoving === \"up\") {\r\n            nextPosition.y = snakeHead.y - 1  < 0 ? this.state.height - 1: snakeHead.y - 1\r\n        } else {\r\n            nextPosition.y = snakeHead.y + 1 >= this.state.height ? 0 : snakeHead.y +1\r\n        }\r\n\r\n        //check to see if game ends\r\n        if(nextPosition.x === -1 || nextPosition.x === this.state.width + 1 ||\r\n            nextPosition.y === -1 || nextPosition.y === this.state.height + 1 ||\r\n            this.isSnakeInThisPosition(nextPosition)) {\r\n                this.gameOver()\r\n        } else {\r\n            snake.unshift(nextPosition)\r\n            console.log(snake)\r\n            if(this.state.snake.length > this.state.score + 1) {\r\n                snake.pop()\r\n            }\r\n            console.log(snake)\r\n            this.setState({snake: snake})\r\n            this.step()\r\n        }\r\n    }\r\n\r\n    step = () => {\r\n        if (this.state.food.x === this.state.snake[0].x &&\r\n            this.state.food.y === this.state.snake[0].y) {\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            })\r\n            this.getRandomFoodLocation()\r\n        }\r\n        // this.setState({food: {x : 10, y: 10}})\r\n\r\n    }\r\n\r\n    drawGrid(){\r\n        var grid = []\r\n        console.log(this.state.food.x +\", \" + this.state.food.y)\r\n        for(var y = 0; y < this.state.height; y++) {\r\n            for(var x = 0; x < this.state.width; x++) {\r\n                if(y === this.state.food.y && x === this.state.food.x) {\r\n                    grid.push(\"ü•©\")\r\n                    continue\r\n                }\r\n                var flag = true\r\n                for(var i = 0; i < this.state.snake.length; i++) {\r\n                    if (y === this.state.snake[i].y && x === this.state.snake[i].x) {\r\n                        grid.push(\"‚¨õÔ∏è\")\r\n                        flag = false\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    grid.push(\"‚¨úÔ∏è\")\r\n                }\r\n            }\r\n            grid.push(<br/>)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    getRandomFoodLocation = () => {\r\n        var newFood = {x: 0, y: 0}\r\n        do {\r\n            newFood.y = Math.floor(Math.random() * this.state.height)\r\n            newFood.x = Math.floor(Math.random() * this.state.width)\r\n        } while (this.isSnakeInThisPosition(newFood))\r\n        console.log(newFood)\r\n        this.setState({food: newFood})\r\n    }\r\n\r\n    gameOver = () => {\r\n        this.setState({gameOver : true})\r\n    }\r\n\r\n    newGame = () => {\r\n        this.setState({\r\n            gameOver : false,\r\n            snake: [{x: 1, y: 1}],\r\n            score: 0,\r\n            positionMoving: 'down'\r\n        })\r\n        this.getRandomFoodLocation()\r\n    }\r\n\r\n    move = (movement: string) => {\r\n        // var newMovement = this.state.positionMoving\r\n        // if((this.state.previousPosition === \"left\" && movement !== \"right\") ||\r\n        //    (this.state.previousPosition === \"right\" && movement !== \"left\") ||\r\n        //    (this.state.previousPosition === \"up\" && movement !== \"down\") ||\r\n        //    (this.state.previousPosition === \"down\" && movement !== \"up\")) {\r\n        //        newMovement = movement\r\n        //     }\r\n        this.setState({\r\n            positionMoving: movement\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Snake</h1>\r\n                <br/>\r\n                <h1>{this.state.score}</h1>\r\n                {this.drawGrid()}\r\n                <br />\r\n                <button onClick={this.newGame}>New Game</button>\r\n                <button onClick={() => this.move(\"left\")}>‚óÄÔ∏è</button>\r\n                <button onClick={() => this.move(\"up\")}>üîº</button>\r\n                <button onClick={() => this.move(\"down\")}>üîΩ</button>\r\n                <button onClick={() => this.move(\"right\")}>‚ñ∂Ô∏è</button>\r\n                <button onClick={this.gameOver}>End Game</button>\r\n                <br />\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":8,"nodeType":"32","messageId":"33","endLine":2,"endColumn":12},{"ruleId":"30","severity":1,"message":"34","line":1,"column":10,"nodeType":"32","messageId":"33","endLine":1,"endColumn":16},{"ruleId":"30","severity":1,"message":"35","line":4,"column":10,"nodeType":"32","messageId":"33","endLine":4,"endColumn":24},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'throws' is defined but never used.","'isThisTypeNode' is defined but never used.","no-global-assign","no-unsafe-negation"]